from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import sqlite3
from keyboards import main_menu

router = Router()

DB_PATH = "database/shop.db"
# region    
class CatalogState(StatesGroup):
    waiting_for_product_choice = State()
    viewing_product = State()

def get_categories():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT category FROM products")
    categories = [row[0] for row in cursor.fetchall()]
    conn.close()
    return categories

def get_products_by_category(category):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, price FROM products WHERE category = ?", (category,))
    products = cursor.fetchall()
    conn.close()
    return products

def get_product_by_id(product_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT name, description, price, image_url FROM products WHERE id = ?", (product_id,))
    product = cursor.fetchone()
    conn.close()
    return product

def add_to_cart(user_id, product_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT quantity FROM cart WHERE user_id=? AND product_id=?", (user_id, product_id))
    row = cursor.fetchone()
    if row:
        cursor.execute("UPDATE cart SET quantity=quantity+1 WHERE user_id=? AND product_id=?", (user_id, product_id))
    else:
        cursor.execute("INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, 1)", (user_id, product_id))
    conn.commit()
    conn.close()
# endregion    
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=main_menu
    )

@router.message(F.text == "üì¶ –ö–∞—Ç–∞–ª–æ–≥")
async def show_categories(message: Message):
    categories = get_categories()
    buttons = [
        [InlineKeyboardButton(text=cat, callback_data=f"category:{cat}")]
        for cat in categories
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard)

@router.message(F.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def clear_cart(message: Message):
    user_id = message.from_user.id
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM cart WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()
    await message.answer("üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")

@router.message(F.text == "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def checkout_handler(message: Message):
    await message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n(–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ ‚Äî –Ω–µ—ÇüôÇ)")

@router.message(F.text == "üìç –û –º–∞–≥–∞–∑–∏–Ω–µ")
async def about_handler(message: Message):
    await message.answer(
        "üè™ <b>TehMag ‚Äî –º–∞–≥–∞–∑–∏–Ω –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –ë–∏–±–∞ –∏ –ë–æ–±–∞</b>\n"
        "üìç –ê–¥—Ä–µ—Å: –ü—É—à–∫–∏–Ω–∞, —É–ª. –ö–æ–ª–æ—Ç—É—à–∫–∏–Ω–∞, –¥. 777\n"
        "üïò –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –Ω–∏–∫–æ–≥–¥–∞ \n"
        "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏(–Ω–æ —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ)\n"
        "üì¶ –ë–æ–ª–µ–µ 10 000 —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏!(—Ç–æ–∂–µ –Ω–µ —Ñ–∞–∫—Ç)",
        parse_mode="HTML"
    )

@router.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: Message):
    await message.answer(
        "–¢—É—Ç –≤–∞–º –Ω–µ –º–æ–º–æ–≥—É—Ç,—É—Ö–æ–¥–∏—Ç–µ"
    )


@router.callback_query(F.data.startswith("category:"))
async def show_products(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("category:")[1]
    products = get_products_by_category(category)

    if not products:
        await callback.message.answer(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        await callback.answer()
        return

    await state.update_data(product_list=products, category=category)

    text = f"üìã –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b>:\n\n"
    for i, (prod_id, name, price) in enumerate(products, 1):
        text += f"{i}Ô∏è‚É£ <b>{name}</b> ‚Äì {price}‚ÇΩ\n"

    text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
    await callback.message.answer(text, parse_mode="HTML")
    await state.set_state(CatalogState.waiting_for_product_choice)
    await callback.answer()

@router.message(CatalogState.waiting_for_product_choice)
async def handle_product_choice(message: Message, state: FSMContext):
    data = await state.get_data()
    product_list = data.get("product_list", [])
    category = data.get("category")

    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    choice = int(message.text)
    if not (1 <= choice <= len(product_list)):
        await message.answer("‚ùå –ù–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
        return

    product_id = product_list[choice - 1][0]
    product = get_product_by_id(product_id)

    if not product:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    name, description, price, image_url = product

    await state.update_data(selected_product_id=product_id)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_list")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="add_to_cart")]
    ])

    if image_url:
        await message.answer_photo(
            image_url,
            caption=f"<b>{name}</b>\nüí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\n\n{description}",
            reply_markup=markup,
            parse_mode="HTML"
        )
    else:
        await message.answer(
            f"<b>{name}</b>\nüí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\n\n{description}",
            reply_markup=markup,
            parse_mode="HTML"
        )

    await state.set_state(CatalogState.viewing_product)


@router.callback_query(F.data == "back_to_list")
async def back_to_list(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category = data.get("category")
    product_list = data.get("product_list")

    if not category or not product_list:
        await callback.message.answer("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Ç–µ—Ä—è–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    text = f"üìã –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b>:\n\n"
    for i, (prod_id, name, price) in enumerate(product_list, 1):
        text += f"{i}Ô∏è‚É£ <b>{name}</b> ‚Äì {price}‚ÇΩ\n"
    text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."

    await callback.message.answer(text, parse_mode="HTML")
    await state.set_state(CatalogState.waiting_for_product_choice)
    await callback.answer()



@router.callback_query(F.data == "add_to_cart")
async def add_selected_to_cart(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    product_id = data.get("selected_product_id")
    category = data.get("category")
    product_list = data.get("product_list", [])
    user_id = callback.from_user.id

    if product_id is not None:
        add_to_cart(user_id, product_id)
        await callback.message.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")
        await state.update_data(selected_product_id=product_id)
        await state.set_state(CatalogState.viewing_product)
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω.")
    await callback.answer()



from aiogram.fsm.state import State, StatesGroup

class SearchState(StatesGroup):
    waiting_for_query = State()


@router.message(F.text == "üîé –ü–æ–∏—Å–∫")
async def ask_search_query(message: Message, state: FSMContext):
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(SearchState.waiting_for_query)

@router.message(SearchState.waiting_for_query)
async def handle_search(message: Message, state: FSMContext):
    query = message.text.lower()
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, price FROM products WHERE LOWER(name) LIKE ?", ('%' + query + '%',))
    results = cursor.fetchall()
    conn.close()

    if not results:
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É.")
        return

    text = "üîé –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n\n"
    for i, (pid, name, price) in enumerate(results, 1):
        text += f"{i}Ô∏è‚É£ <b>{name}</b> ‚Äì {price}‚ÇΩ\n"

    await message.answer(text, parse_mode="HTML")
    await state.clear()


@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: Message, state: FSMContext):
    await state.clear() 
    user_id = message.from_user.id
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT p.name, c.quantity, p.price
        FROM cart c
        JOIN products p ON c.product_id = p.id
        WHERE c.user_id = ?
    ''', (user_id,))
    items = cursor.fetchall()
    conn.close()

    if not items:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    text = "üßæ <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    total = 0
    for name, qty, price in items:
        text += f"‚Ä¢ <b>{name}</b> ‚Äî {qty} —à—Ç. x {price}‚ÇΩ = {qty * price}‚ÇΩ\n"
        total += qty * price

    text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ: {total}‚ÇΩ</b>"

    await message.answer(text, parse_mode="HTML")


